// 1. Есть словарь с видами чая и их стоимостью. Есть очередь людей, которые хотят заказать чай (можно представить её в виде массива видов чая, которые хотят заказать).
// Необходимо последовательно выводить в консоль сколько заплатит покупатель (необходимо вывести его номер по порядку, чай, который он заказал, и стоимость).

// Виды чая
enum Tea {
    case black
    case green
    case red
    case white
}

// Стоимость чая
let teaPrices: [Tea: Int] = [
    .black: 150,
    .green: 120,
    .red: 180,
    .white: 200
]

// Очередь людей (заказов)
var teaOrders: [Tea] = [.green, .red, .green, .black, .white, .green]

// Перечисляем заказы
for (i, v) in teaOrders.enumerated() {
    print("\(i + 1). Чай: \(v), стоимость: \(teaPrices[v])")
}
/*
1. Чай: green, стоимость: 120
2. Чай: red, стоимость: 180
3. Чай: green, стоимость: 120
4. Чай: black, стоимость: 150
5. Чай: white, стоимость: 200
6. Чай: green, стоимость: 120
*/




// 2. Есть массив [-4, 5, 10, nil, 4, nil, 25, 0, nil, 16, 75, -20, -7, 15, 0, nil]. Необходимо создать новый массив, который будет состоять из элементов старого, но не должно быть nil, не должно быть 0 и 4, а также массив должен быть отсортирован по возрастанию.

var a: [Int?] = [-4, 5, 10, nil, 4, nil, 25, 0, nil, 16, 75, -20, -7, 15, 0, nil]

//var b = a.compactMap { Int($0) } // Так выдаёт ошибку

var b = a.compactMap { $0 != nil ? Int($0!) : nil }.sorted(by: <)

print(b) // [-20, -7, -4, 0, 0, 4, 5, 10, 15, 16, 25, 75]


// Другой способ:

var b: [Int] = []

for el in a {
    if let v = el, v != 0, v != 4 {
        b.append(v)
    }
}

print(b.sorted(by: <)) // [-20, -7, -4, 0, 0, 4, 5, 10, 15, 16, 25, 75]





// 3. Написать функцию, которая на вход принимает целое число, а возвращает массив, который сформирован по следующим правилам: количество элементов соответствует переданному числу, массив начинается с 1, каждый последующий элемент больше предыдущего в 2 раза.

func myFunc(x: Int) -> [Int] {
    
    var arr: [Int] = []
    var v = 1
    
    for _ in 1...x {
        arr.append(v)
        v = v * 2
    }
    
    return arr
}

print(myFunc(x: 10)) // [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]


// Попробовал также решить через рекурсию:

var arr: [Int] = []
var a = 10

func myFunc(i: Int) -> Void {

    arr.append(i)
    
    if arr.count < a {
        myFunc(i: i * 2)
    }
}

myFunc(i: 1)

print(arr) // [1, 2, 4, 8, 16, 32, 64, 128, 256, 512] 